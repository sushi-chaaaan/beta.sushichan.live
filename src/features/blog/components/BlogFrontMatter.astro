---
import type { CollectionEntry } from "astro:content";
import type { ReadTimeResults } from "reading-time";

import Fa6SolidArrowsRotate from "~icons/fa6-solid/arrows-rotate";
import Fa6SolidCalendar from "~icons/fa6-solid/calendar";
import Fa6SolidClock from "~icons/fa6-solid/clock";
import { tv } from "tailwind-variants";

import Link from "../../../components/element/Link.astro";
import CloudinaryImage from "../../../components/ui/CloudinaryImage.astro";
import Message from "../../../components/ui/Message.astro";
import { formatInJst, replaceUtcWithJst } from "../../../lib/date";
import { roundReadTime } from "../../../utils/markdown";
import { trimExtension } from "../../../utils/string";
import { getPostOgpImage } from "../utils/post";
import TagLinkFlex from "./tag/TagLinkFlex.astro";

type Props = {
  entry: CollectionEntry<"posts">;
  readTime?: ReadTimeResults;
};

const { entry, readTime } = Astro.props;

const roundedMinutesRead = roundReadTime(readTime, 1);
const createdAtDate = replaceUtcWithJst(entry.data.createdAt);
const updatedAtDate = entry.data.updatedAt
  ? replaceUtcWithJst(entry.data.updatedAt)
  : undefined;

const slug = trimExtension(entry.id);

const OGPUrl = getPostOgpImage(slug, {
  baseUrl: Astro.url,
  extension: "png",
});

const styles = tv({
  slots: {
    contentWrapper: "flex flex-col flex-nowrap gap-2 md:gap-4",
    description: "text-balance",
    icon: "text-blue-500",
    image: "size-full object-cover",
    imageWrapper: "aspect-16/9 overflow-hidden rounded-lg",
    metaData:
      "flex flex-row flex-nowrap items-center justify-center gap-1.5 text-sm text-zinc-500 dark:text-zinc-400",
    metaDataWrapper: "flex flex-row flex-wrap gap-x-4 gap-y-[6px]",
    root: "flex flex-col flex-nowrap place-content-between gap-4",
    textWrapper: "flex flex-col flex-nowrap gap-2",
    title: "text-xl font-bold md:text-4xl text-balance",
  },
})();
---

<div
  class:list={styles.root()}
  transition:animate="fade"
  transition:name={`card-${slug}`}
>
  <div class:list={styles.imageWrapper()}>
    <CloudinaryImage
      alt={`thumbnail of ${slug}`}
      class:list={styles.image()}
      priority
      quality={100}
      src={entry.data.thumbnail}
    />
  </div>
  <div class:list={styles.contentWrapper()}>
    <h1
      class:list={styles.title()}
      transition:animate="fade"
      transition:name={`title-${slug}`}
    >
      {entry.data.title}
    </h1>
    <div class:list={styles.description()}>{entry.data.description}</div>
    <div class:list={styles.textWrapper()}>
      <div class:list={styles.metaDataWrapper()}>
        <div class:list={styles.metaData()}>
          <Fa6SolidCalendar />
          <time datetime={createdAtDate.toISOString()}
            >{formatInJst(createdAtDate, "YYYY/MM/DD")}</time
          >
        </div>
        {
          updatedAtDate && (
            <div class:list={styles.metaData()}>
              <Fa6SolidArrowsRotate />
              <time datetime={updatedAtDate.toISOString()}>
                {formatInJst(updatedAtDate, "YYYY/MM/DD")}
              </time>
            </div>
          )
        }
        {
          roundedMinutesRead !== undefined && (
            <div class:list={styles.metaData()}>
              <Fa6SolidClock />
              <span>{roundedMinutesRead} min to read</span>
            </div>
          )
        }
      </div>
      {entry.data.tags && <TagLinkFlex tags={entry.data.tags} />}
      {
        entry.data.status === "draft" && (
          <Message type="warn">
            この記事は下書きです。 本番ビルド時には表示されません。
          </Message>
        )
      }
      {
        entry.data.status === "preview" && (
          <Message type="warn">
            この記事はプレビューです。記事一覧には表示されません。
          </Message>
        )
      }
      {import.meta.env.DEV && <Link href={OGPUrl}>OGPを確認する</Link>}
      {import.meta.env.DEV && <span>現在の文字数:{entry.body.length}</span>}
    </div>
  </div>
</div>
