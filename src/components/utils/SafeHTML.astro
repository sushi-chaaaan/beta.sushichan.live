---
import type { HTMLAttributes } from "astro/types";

import { sanitizeHTML } from "../../utils/html";

interface Props extends Omit<HTMLAttributes<"div">, "set:html"> {
  __dangerouslyDisableSanitizer?: boolean;
  afterSanitize?: (html: string) => string;
  as?: "div" | "Fragment" | "span";
  rawHTML: string;
}

const {
  __dangerouslyDisableSanitizer = false,
  afterSanitize,
  as = "div",
  rawHTML,
  ...props
} = Astro.props;

const safeHTML = __dangerouslyDisableSanitizer
  ? rawHTML
  : sanitizeHTML(rawHTML);
const finalHTML = afterSanitize ? afterSanitize(safeHTML) : safeHTML;

// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
const Component = as === "Fragment" ? Fragment : as;
---

{/* eslint-disable-next-line astro/no-set-html-directive */}
<Component set:html={finalHTML} {...props} />
