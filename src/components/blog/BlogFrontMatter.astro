---
import type { CollectionEntry } from "astro:content"
import type { ReadTimeResults } from "reading-time"

import TagLinkFlex from "@/components/blog/tag/TagLinkFlex.astro"
import BudouX from "@/components/common/BudouX.astro"
import Icon from "@/components/common/Icon.astro"
import CloudinaryImage from "@/components/ui/CloudinaryImage.astro"
import { dtTool } from "@/lib/date"
import { declareLet } from "@/utils/declareLet"
import { roundReadTime } from "@/utils/markdown"

type Props = {
  entry: CollectionEntry<"posts">
  readTime?: ReadTimeResults
}

const { entry, readTime } = Astro.props

const roundedMinutesRead = roundReadTime(readTime, 1)
const createdAtDate = dtTool.replaceTzWithJst(entry.data.createdAt)
const updatedAtDate = declareLet(() => {
  if (entry.data.updatedAt) {
    return dtTool.replaceTzWithJst(entry.data.updatedAt)
  }
})
---

<div
  class="flex flex-col flex-nowrap place-content-between gap-4"
  transition:animate="fade"
  transition:name={`card-${entry.slug}`}
>
  <div class="aspect-16/9 overflow-hidden rounded-lg">
    <CloudinaryImage
      alt={`thumbnail of ${entry.slug}`}
      class="h-full w-full object-cover"
      quality={100}
      src={entry.data.thumbnail}
      priority
    />
  </div>
  <div class="flex flex-col flex-nowrap gap-2 md:gap-4">
    <h1
      class="text-xl md:text-4xl"
      transition:animate="fade"
      transition:name={`title-${entry.slug}`}
    >
      <BudouX>
        {entry.data.title}
      </BudouX>
    </h1>
    <BudouX>{entry.data.description}</BudouX>
    <div class="flex flex-row flex-wrap gap-x-3 gap-y-[6px]">
      <div class="flex flex-row flex-nowrap items-center justify-center gap-2">
        <Icon class="text-blue-500" icon="fa6-solid:pen" />
        <time datetime={createdAtDate.toISOString()}
          >{dtTool.formatInJst(createdAtDate, "yyyy/MM/dd")}</time
        >
      </div>
      {
        updatedAtDate && (
          <div class="flex flex-row flex-nowrap items-center justify-center gap-2">
            <Icon class="text-blue-500" icon="fa6-solid:arrow-rotate-right" />
            <time datetime={updatedAtDate.toISOString()}>
              {dtTool.formatInJst(
                dtTool.replaceTzWithJst(updatedAtDate),
                "yyyy/MM/dd",
              )}
            </time>
          </div>
        )
      }
      {
        roundedMinutesRead !== undefined && (
          <div class="flex flex-row flex-nowrap items-center justify-center gap-2">
            <Icon class="text-blue-500" icon="fa6-solid:clock" />
            <span>{roundedMinutesRead} min to read</span>
          </div>
        )
      }
    </div>
    {entry.data.tags && <TagLinkFlex tags={entry.data.tags} />}
    {
      entry.data.status === "draft" && (
        <div class="alert alert-warning">
          <Icon icon="fa6-solid:circle-exclamation" />
          <BudouX>
            この記事は下書きです。 本番ビルド時には表示されません。
          </BudouX>
        </div>
      )
    }
    {
      entry.data.status === "preview" && (
        <div class="alert alert-warning">
          <Icon icon="fa6-solid:circle-exclamation" />
          <BudouX>
            この記事はプレビューです。記事一覧には表示されません。
          </BudouX>
        </div>
      )
    }
  </div>
</div>

<style>
  span {
    display: inline-block;
    width: fit-content;
  }
</style>
