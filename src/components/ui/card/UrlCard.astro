---
import Card, { type CardProps } from "@/components/common/Card.astro";
import Link from "@/components/element/Link.astro";
import { type MetaData, fetchMetaData } from "@/lib/fetchMetaData";
import { declareLet } from "@/utils/declareLet";
import { isInternalLink } from "@/utils/helper";
import { tv } from "tailwind-variants";

interface Props extends CardProps {
  url: URL | string;
}

const { round = true, url: rawUrl, ...props } = Astro.props;

type ImageSet = {
  alt: string;
  src: string;
};

const style = tv({
  slots: {
    innerWrapper:
      "flex h-[260px] flex-col flex-nowrap rounded-lg md:h-[120px] md:flex-row [&>*]:min-w-0",
    wrapper:
      "mx-auto bg-inherit hocus:bg-zinc-100 max-md:max-w-[calc(180px*1200/630)] md:w-full dark:hocus:bg-zinc-800",
  },
  variants: {},
})();

const getImage = ({ icon, image, title }: MetaData): ImageSet | undefined => {
  if (image) {
    return {
      alt: image.alt ?? `ogp of ${title}`,
      src: image.src,
    };
  }

  if (icon != null) {
    return {
      alt: `icon of ${title}`,
      src: icon,
    };
  }

  return undefined;
};

const url = declareLet(() => {
  if (typeof rawUrl === "string" && isInternalLink(rawUrl)) {
    return new URL(rawUrl, Astro.url);
  }

  return new URL(rawUrl);
});
const metaData = await fetchMetaData(url.toString());

// const metaData = await fetchMetaDataWithOGS(url.toString())
const imageSet = getImage(metaData);
---

<Card round={round} shadow={false} {...props}>
  <Link
    aria-label={metaData.title}
    class:list={style.wrapper()}
    href={url}
    target="_blank"
    variants={{ decoration: "none" }}
  >
    <div
      aria-hidden="true"
      class="flex h-[260px] flex-col flex-nowrap rounded-lg border border-zinc-300 md:h-[120px] md:flex-row dark:border-zinc-600 [&>*]:min-w-0"
    >
      {
        imageSet && (
          <div class="shrink overflow-hidden max-md:rounded-t-[calc(0.5rem-1px)] md:rounded-s-[calc(0.5rem-1px)] ">
            <img
              alt={imageSet.alt}
              class="aspect-1200/630 h-[180px] object-cover md:h-[120px]"
              decoding="async"
              loading="lazy"
              src={imageSet.src}
            />
          </div>
        )
      }
      <div
        class="flex h-[80px] shrink flex-col flex-nowrap justify-around px-4 max-md:py-1 md:h-[120px] md:flex-1 [&>*]:max-w-full"
      >
        <span class="line-clamp-1 text-lg md:line-clamp-2"
          >{metaData.title}</span
        >
        <span class="hidden text-sm">{metaData.description}</span>
        <div
          class="relative bottom-1 start-1 flex flex-row flex-nowrap place-items-center gap-1 justify-self-end [&>*]:min-w-0"
        >
          {
            metaData.icon != null && (
              <img
                alt={metaData.title}
                class="rounded-sm"
                decoding="async"
                height={16}
                loading="lazy"
                src={metaData.icon}
                width={16}
              />
            )
          }
          <span class="line-clamp-1 text-base text-zinc-500 dark:text-zinc-400"
            >{url.hostname}</span
          >
        </div>
      </div>
    </div>
  </Link>
</Card>
