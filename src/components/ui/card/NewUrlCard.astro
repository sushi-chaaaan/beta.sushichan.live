---
import { tv } from "tailwind-variants";

import type { MetaData } from "../../../lib/fetchMetaData";
import type { CardProps } from "../../common/Card.astro";

import { fetchMetaData } from "../../../lib/fetchMetaData";
import { declareLet } from "../../../utils/declareLet";
import { isInternalLink } from "../../../utils/helper";
import Card from "../../common/Card.astro";
import Link from "../../element/Link.astro";

interface Props extends CardProps {
  url: string | URL;
}

const { round = true, shadow = true, url: rawUrl, ...props } = Astro.props;

const getImage = ({
  image,
  title,
}: MetaData): MetaData["image"] | undefined => {
  if (image) {
    const { alt, ...rest } = image;
    return {
      alt: alt ?? `ogp of ${title}`,
      ...rest,
    };
  }

  return undefined;
};

const url = declareLet(() => {
  if (typeof rawUrl === "string" && isInternalLink(rawUrl)) {
    return new URL(rawUrl, Astro.url);
  }

  return new URL(rawUrl);
});
const metadata = await fetchMetaData(url.toString());

const imageSet = getImage(metadata);

const styles = tv({
  slots: {
    image: "relative aspect-auto h-full shrink-0",
    innerWrapper: "flex",
    wrapper: "w-full",
  },
})();
---

<Card round={round} shadow={shadow} {...props}>
  <Link
    class:list={styles.wrapper()}
    href={rawUrl}
    target="_blank"
    variants={{ decoration: "none", hoverColor: "neutral" }}
  >
    <div class:list={styles.innerWrapper()}>
      <div class:list={styles.image()}>
        {
          imageSet ? (
            <img
              alt={imageSet.alt}
              class="absolute inset-0 size-full object-cover"
              src={imageSet.src}
            />
          ) : (
            <div>no image</div>
          )
        }
      </div>
    </div>
  </Link>
</Card>
