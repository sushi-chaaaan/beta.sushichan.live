---
import type { CollectionEntry } from "astro:content"

import BlogFrontMatter from "@/components/blog/BlogFrontMatter.astro"
import BlogStyle from "@/components/blog/BlogStyle.astro"
import MDXRenderer from "@/components/blog/MDXRenderer.astro"
import ContentLayout from "@/components/common/ContentLayout.astro"
import BlogPostSEO from "@/components/meta/BlogPostSEO.astro"
import PageAlertWrapper from "@/components/ui/PageAlertWrapper.astro"
import SafeHTML from "@/components/utils/SafeHTML.astro"
import BlogLayout from "@/layouts/BlogLayout.astro"
import { getAllPosts } from "@/lib/blogPost"
import { parseMarkdownArray } from "@/utils/markdown"

export async function getStaticPaths() {
  const blogEntries = await getAllPosts()
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }))
}

type Props = {
  entry: CollectionEntry<"posts">
}

const { entry } = Astro.props
const { Content, headings } = await entry.render()

const showAlert = entry.data.alert && entry.data.alert.length > 0

export const prerender = true

const alerts = entry.data.alert || []
const parsedAlerts = await parseMarkdownArray(alerts)
---

<BlogLayout>
  <BlogPostSEO entry={entry} slot="seo" />
  <ContentLayout asElement="article">
    <BlogFrontMatter entry={entry} />
    <div class="divider"></div>
    <PageAlertWrapper backIfNewTab="/blog">
      {
        showAlert && (
          // HACK: https://github.com/withastro/astro/issues/6318
          <ul slot={showAlert && "alert"}>
            {parsedAlerts?.map((n) => (
              <li>
                <SafeHTML rawHTML={n} />
              </li>
            ))}
          </ul>
        )
      }
      <BlogStyle>
        <MDXRenderer content={Content} headings={headings} tocDepth={2} />
      </BlogStyle>
    </PageAlertWrapper>
  </ContentLayout>
</BlogLayout>
