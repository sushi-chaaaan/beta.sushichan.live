---
import type { CollectionEntry } from "astro:content"
import type { ReadTimeResults } from "reading-time"

import BudouX from "@/components/common/BudouX.astro"
import Icon from "@/components/common/Icon.astro"
import Link from "@/components/element/Link.astro"
import CloudinaryImage from "@/components/ui/CloudinaryImage.astro"
import TagLinkFlex from "@/feature/blog/components/tag/TagLinkFlex.astro"
import { getPostOgpImage } from "@/feature/blog/utils/post"
import { dtTool } from "@/lib/date"
import { declareLet } from "@/utils/declareLet"
import { roundReadTime } from "@/utils/markdown"
import { tv } from "tailwind-variants"

type Props = {
  entry: CollectionEntry<"posts">
  readTime?: ReadTimeResults
}

const { entry, readTime } = Astro.props

const roundedMinutesRead = roundReadTime(readTime, 1)
const createdAtDate = dtTool.replaceTzWithJst(entry.data.createdAt)
const updatedAtDate = declareLet(() => {
  if (entry.data.updatedAt) {
    return dtTool.replaceTzWithJst(entry.data.updatedAt)
  }
})
const OGPUrl = getPostOgpImage(entry.slug, {
  baseUrl: Astro.url,
  extension: "png",
})

const styles = tv({
  slots: {
    contentWrapper: "flex flex-col flex-nowrap gap-2 md:gap-4",
    icon: "text-blue-500",
    image: "size-full object-cover",
    imageWrapper: "aspect-16/9 overflow-hidden rounded-lg",
    metaData: "flex flex-row flex-nowrap items-center justify-center gap-1",
    metaDataWrapper: "flex flex-row flex-wrap gap-x-4 gap-y-[6px] text-sm",
    root: "flex flex-col flex-nowrap place-content-between gap-4",
    textWrapper: "flex flex-col flex-nowrap gap-2",
    title: "text-xl font-bold md:text-4xl",
  },
})()
---

<div
  class:list={styles.root()}
  transition:animate="fade"
  transition:name={`card-${entry.slug}`}
>
  <div class:list={styles.imageWrapper()}>
    <CloudinaryImage
      alt={`thumbnail of ${entry.slug}`}
      class:list={styles.image()}
      quality={100}
      src={entry.data.thumbnail}
      priority
    />
  </div>
  <div class:list={styles.contentWrapper()}>
    <h1
      class:list={styles.title()}
      transition:animate="fade"
      transition:name={`title-${entry.slug}`}
    >
      <BudouX>
        {entry.data.title}
      </BudouX>
    </h1>
    <BudouX>{entry.data.description}</BudouX>
    <div class:list={styles.textWrapper()}>
      <div class:list={styles.metaDataWrapper()}>
        <div class:list={styles.metaData()}>
          <Icon class:list={styles.icon()} icon="fa6-solid:pen" size="sm" />
          <time datetime={createdAtDate.toISOString()}
            >{dtTool.formatInJst(createdAtDate, "yyyy/MM/dd")}</time
          >
        </div>
        {
          updatedAtDate && (
            <div class:list={styles.metaData()}>
              <Icon
                class:list={styles.icon()}
                icon="fa6-solid:arrow-rotate-right"
                size="sm"
              />
              <time datetime={updatedAtDate.toISOString()}>
                {dtTool.formatInJst(
                  dtTool.replaceTzWithJst(updatedAtDate),
                  "yyyy/MM/dd",
                )}
              </time>
            </div>
          )
        }
        {
          roundedMinutesRead !== undefined && (
            <div class:list={styles.metaData()}>
              <Icon
                class:list={styles.icon()}
                icon="fa6-solid:clock"
                size="sm"
              />
              <span>{roundedMinutesRead} min to read</span>
            </div>
          )
        }
      </div>
      {entry.data.tags && <TagLinkFlex tags={entry.data.tags} />}
      {
        entry.data.status === "draft" && (
          <div class="alert alert-warning">
            <Icon icon="fa6-solid:circle-exclamation" />
            <BudouX>
              この記事は下書きです。 本番ビルド時には表示されません。
            </BudouX>
          </div>
        )
      }
      {
        entry.data.status === "preview" && (
          <div class="alert alert-warning">
            <Icon icon="fa6-solid:circle-exclamation" />
            <BudouX>
              この記事はプレビューです。記事一覧には表示されません。
            </BudouX>
          </div>
        )
      }
      {import.meta.env.DEV && <Link href={OGPUrl}>OGPを確認する</Link>}
    </div>
  </div>
</div>
